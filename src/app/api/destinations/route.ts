import { NextRequest, NextResponse } from 'next/server';
import type { ApiResponse, PaginatedResponse, Destination } from '@/types';

// Mock data - in a real app, this would come from a database
const mockDestinations: Destination[] = [
  {
    id: '1',
    name: 'Paris',
    country: 'France',
    city: 'Paris',
    description: 'The City of Light offers iconic landmarks, world-class museums, and exquisite cuisine.',
    imageUrl: '/images/paris.jpg',
    rating: 4.8,
    priceRange: 'mid-range',
    tags: ['culture', 'romance', 'food', 'art'],
    coordinates: {
      latitude: 48.8566,
      longitude: 2.3522,
    },
  },
  {
    id: '2',
    name: 'Tokyo',
    country: 'Japan',
    city: 'Tokyo',
    description: 'A fascinating blend of ultramodern and traditional, offering endless discoveries.',
    imageUrl: '/images/tokyo.jpg',
    rating: 4.7,
    priceRange: 'luxury',
    tags: ['culture', 'technology', 'food', 'shopping'],
    coordinates: {
      latitude: 35.6762,
      longitude: 139.6503,
    },
  },
  {
    id: '3',
    name: 'New York',
    country: 'USA',
    city: 'New York',
    description: 'The Big Apple offers world-famous attractions, diverse neighborhoods, and endless entertainment.',
    imageUrl: '/images/new-york.jpg',
    rating: 4.6,
    priceRange: 'luxury',
    tags: ['culture', 'shopping', 'food', 'entertainment'],
    coordinates: {
      latitude: 40.7128,
      longitude: -74.0060,
    },
  },
];

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const search = searchParams.get('search') || '';
    const country = searchParams.get('country') || '';
    const priceRange = searchParams.get('priceRange') || '';

    // Filter destinations based on search parameters
    let filteredDestinations = mockDestinations;

    if (search) {
      filteredDestinations = filteredDestinations.filter(dest =>
        dest.name.toLowerCase().includes(search.toLowerCase()) ||
        dest.country.toLowerCase().includes(search.toLowerCase()) ||
        dest.city.toLowerCase().includes(search.toLowerCase()) ||
        dest.description.toLowerCase().includes(search.toLowerCase())
      );
    }

    if (country) {
      filteredDestinations = filteredDestinations.filter(dest =>
        dest.country.toLowerCase() === country.toLowerCase()
      );
    }

    if (priceRange) {
      filteredDestinations = filteredDestinations.filter(dest =>
        dest.priceRange === priceRange
      );
    }

    // Calculate pagination
    const total = filteredDestinations.length;
    const totalPages = Math.ceil(total / limit);
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedDestinations = filteredDestinations.slice(startIndex, endIndex);

    const response: PaginatedResponse<Destination> = {
      data: paginatedDestinations,
      message: 'Destinations retrieved successfully',
      success: true,
      pagination: {
        page,
        limit,
        total,
        totalPages,
      },
    };

    return NextResponse.json(response);
  } catch (error) {
    console.error('Error fetching destinations:', error);
    
    const errorResponse: ApiResponse<null> = {
      data: null,
      message: 'Failed to fetch destinations',
      success: false,
    };

    return NextResponse.json(errorResponse, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate required fields
    const requiredFields = ['name', 'country', 'city', 'description'];
    for (const field of requiredFields) {
      if (!body[field]) {
        const errorResponse: ApiResponse<null> = {
          data: null,
          message: `Missing required field: ${field}`,
          success: false,
        };
        return NextResponse.json(errorResponse, { status: 400 });
      }
    }

    // Create new destination
    const newDestination: Destination = {
      id: Date.now().toString(), // In a real app, this would be generated by the database
      name: body.name,
      country: body.country,
      city: body.city,
      description: body.description,
      imageUrl: body.imageUrl || '/images/default-destination.jpg',
      rating: body.rating || 0,
      priceRange: body.priceRange || 'mid-range',
      tags: body.tags || [],
      coordinates: body.coordinates || {
        latitude: 0,
        longitude: 0,
      },
    };

    const response: ApiResponse<Destination> = {
      data: newDestination,
      message: 'Destination created successfully',
      success: true,
    };

    return NextResponse.json(response, { status: 201 });
  } catch (error) {
    console.error('Error creating destination:', error);
    
    const errorResponse: ApiResponse<null> = {
      data: null,
      message: 'Failed to create destination',
      success: false,
    };

    return NextResponse.json(errorResponse, { status: 500 });
  }
}
